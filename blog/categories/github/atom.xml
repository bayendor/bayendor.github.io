<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | Musings of an 8-bit Vet]]></title>
  <link href="http://bayendor.github.io/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://bayendor.github.io/"/>
  <updated>2013-07-21T09:26:01-06:00</updated>
  <id>http://bayendor.github.io/</id>
  <author>
    <name><![CDATA[David Bayendor]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes on a github rebase workflow]]></title>
    <link href="http://bayendor.github.io/blog/2013/07/20/notes-on-a-github-rebase-workflow/"/>
    <updated>2013-07-20T20:02:00-06:00</updated>
    <id>http://bayendor.github.io/blog/2013/07/20/notes-on-a-github-rebase-workflow</id>
    <content type="html"><![CDATA[<p>This is primarily for my own reference, but it is an attempt to encapsulate the
git workflow for working with repos being edited by other users.</p>

<p>```ruby
git remote add upstream &ldquo;repo-path&rdquo;     # set upstream to the correct place
git remote add remote_name git_repo_url # make alias for remote (co-workers) repo
  git remote -v                           # verify correct paths to repos</p>

<p>git fetch origin                        # check to see what changed
git rebase origin/branchname            # rewrite branch based on origin/branchname
git mergetool                           # run merge tool to resolve diffs
git rebase &mdash;continue                   # rebase not done yet!
  or git rebase &mdash;skip                    # if you want to accept changes
git clean -f                            # cleans up .orig files generated by merge</p>

<p>git status                              # always a good idea to check status
git add &ldquo;file&rdquo;                          # add only the file you changed!
git commit -m &ldquo;message&rdquo;               <br/>
git push (-f)                           # -f forces changes if necessary
  git status                            # is working directory clean?
```</p>

<p><strong>Setting the branch to track upstream: </strong>
In order to track the remote branch on the first push from that branch specify the
&ldquo;-u&rdquo; switch, i.e. <code>git push -u origin repo_branch</code></p>

<p><strong>Forking / cloning a repository: </strong>
Make sure that you give your collaborator access to your repo from github.com
under settings.  You will add them by their github user name.  If you don&rsquo;t their
<code>git push</code> will be rejected.</p>

<p><strong>Error messages: </strong>
Git is really good about telling you what went wrong, so read the error messages carefully.</p>

<p><strong>Useful Resource: </strong>
<a href="http://johnjwilliams.org/2013/07/git-command-essentials.html">JohnWilliams.org: Git Command Essentials</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When Github Keeps Asking for a Password]]></title>
    <link href="http://bayendor.github.io/blog/2013/07/19/github-101/"/>
    <updated>2013-07-19T21:32:00-06:00</updated>
    <id>http://bayendor.github.io/blog/2013/07/19/github-101</id>
    <content type="html"><![CDATA[<p>If everytime you go to do a remote connect (e.g. <code>push</code>) to github and it requests
your github password, then you have most likely have a problem with your credential helper.</p>

<p>The credential helper is part of a standard github or <code>homebrew</code> install.
But sometimes things don&rsquo;t go as planned, or perhaps your github install was part
of a larger &ldquo;all-in-one&rdquo; install and something got improperly configured.</p>

<p>The good new is it&rsquo;s an easy enough problem to fix.</p>

<p>These instructions apply to OS X, but you can check <a href="https://help.github.com/articles/set-up-git#platform-all">GitHub Help</a> for your platform.</p>

<p>1: First, check to see if you have the credential helper installed:</p>

<p><code>ruby
$ git credential-osxkeychain
</code>
If you get the following then it is installed, go to step 3:
<code>ruby
usage: git credential-osxkeychain &lt;get|store|erase&gt;
</code>
But if you get, go to step 2:
<code>ruby
git: 'credential-osxkeychain' is not a git command. See 'git --help'.
</code>
2: Then you need to install and configure it with:
```ruby</p>

<h1>Download the file</h1>

<p>curl -s -O \
  <a href="http://github-media-downloads.s3.amazonaws.com/osx/git-credential-osxkeychain">http://github-media-downloads.s3.amazonaws.com/osx/git-credential-osxkeychain</a></p>

<h1>Fix the permissions</h1>

<p>chmod u+x git-credential-osxkeychain</p>

<h1>Move it to the right path, sudo may require your password.</h1>

<p>sudo mv git-credential-osxkeychain \
  &ldquo;$(dirname $(which git))/git-credential-osxkeychain&rdquo;
```</p>

<p>3: Lastly, modify your git config file to use the helper:
<code>ruby
$ git config --global credential.helper osxkeychain
</code></p>

<p>The next time you <code>push</code> you&rsquo;ll be asked for your github
password, but after that it should be remembered in your OS X keychain for each
subsequent remote access request.</p>

<p>Thanx for reading. Stay tuned for more from the front linesâ€¦</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Octopress to github.io]]></title>
    <link href="http://bayendor.github.io/blog/2013/07/17/deploying-octopress-to-github-dot-io/"/>
    <updated>2013-07-17T15:01:00-06:00</updated>
    <id>http://bayendor.github.io/blog/2013/07/17/deploying-octopress-to-github-dot-io</id>
    <content type="html"><![CDATA[<p>This blog was created using the <a href="http://octopress.org">Octopress</a> blogging
framework.  I tell you this for several reasons:</p>

<blockquote><ol>
<li>Because one should give credit for other people&rsquo;s work.</li>
<li>Expect the site to change as I learn how to modify it.</li>
<li>Expect the site to break as I learn how to modify it.</li>
</ol>
</blockquote>

<p>The first major hurdle I had, and I suspect my fellow aspiring Web-Belt Jrs had
it as well, was getting the blog to deploy using the Github
<a href="http://pages.github.com">Pages</a> hosting service.</p>

<p>The Octopress documentation does cover this process, but the workflow for the
newly minted web-dev can be a bit overwhelming.  There&rsquo;s a lot of stuff happening
with <code>git</code> at the command line that may seem unfamiliar.  Having said
that I&rsquo;ll throw my $0.02 worth of advice into the ring, and see if I can&rsquo;t make
it easier for anyone reading this.</p>

<h3>Set up your username.github.io repo</h3>

<p>Go to your github home page and click on the button labeled &ldquo;New Repository&rdquo; on
the right side of the screen.</p>

<p><img class="<a" src="href="http://f.cl.ly/items/3S0d3m1P0s400S122G1x/GitHub.jpeg">http://f.cl.ly/items/3S0d3m1P0s400S122G1x/GitHub.jpeg</a>"></p>

<p>On the next page enter the name of the repo, in the form
<code>username.github.io</code> where <code>username</code> is YOUR github user ID.</p>

<p><img class="<a" src="href="http://f.cl.ly/items/3x1a0m0W1o3H0x0W3W17/Create_a_New_Repository.jpeg">http://f.cl.ly/items/3x1a0m0W1o3H0x0W3W17/Create_a_New_Repository.jpeg</a>"></p>

<p>Enter an optional description if you wish and click on the green &ldquo;Create
Repository&rdquo; button.</p>

<p>The next page will show you the setup for your repo, and the repo name.  Make
sure that the SSH button is selected and copy the address in the box to your
clipboard, you will need it for the next step.  It will be in the form <code>git@github.com:username/username.github.io.git</code></p>

<p><img class="<a" src="href="http://f.cl.ly/items/3f47300A0y1R0Q1L0X2h/username.github.io.jpeg">http://f.cl.ly/items/3f47300A0y1R0Q1L0X2h/username.github.io.jpeg</a>"></p>

<blockquote><p>Note: It can take github several minutes to setup your username.git.io page.
If you get a 404 error, just go do something else for a little while, and
then come back and try again.</p></blockquote>

<h3>Set up your Octopress code base to deploy to github.io</h3>

<p>Switch to your terminal program and <code>cd</code> into your octopress directory,
and then run the <code>rake setup_github_pages</code></p>

<p>For my fellow DaVinci Coder&rsquo;s that would be:
<code>ruby
cd ~/workspace/octopress
rake setup_github_pages
</code>
It will ask you for the repo name you copied in the last step.  Enter it and continue.
When the <code>rake</code> job is finished your local repository will have been
set up via series of git commands to push your blog code to your username.github.io page.</p>

<p>The next step is to actually publish the blog.</p>

<h3>Workflow for publishing your blog entries</h3>

<p>The workflow goes like this:
<code>ruby
rake new_post["title"]    # Create a new post.
rake generate             # Generate your blog.
rake deploy               # Deploy (duh!) your blog.
</code></p>

<p>When you deploy you will see a lot of code go scrolling up the screen.  This is
git committing and pushing the <code>_deploy</code> folder to the <code>master</code>
branch of your repo.</p>

<p>Go check out your published blog at: <a href="username.github.io">username.github.io</a>.</p>

<p>Also, don&rsquo;t forget to commit and save your changes, using the standard git workflow:</p>

<p><code>ruby
git add .
git commit -m 'your message'
git push origin source
</code>
Just repeat the process to add new posts and publish them.</p>

<p>For more detail on the process see the first link, and for direction in automating
the workflow even further see the second link.</p>

<p>From Octopress:
<a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a></p>

<p>From Kevin van Zonneveld:
<a href="http://kvz.io/blog/2012/09/25/blog-with-octopress/">Blog with Octopress and Github pages</a></p>

<p>Thanx for reading.  Stay tuned for more from the front lines&hellip;</p>
]]></content>
  </entry>
  
</feed>
