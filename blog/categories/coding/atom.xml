<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coding | Musings of an 8-bit Vet]]></title>
  <link href="http://bayendor.github.io/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://bayendor.github.io/"/>
  <updated>2013-08-16T15:25:10-06:00</updated>
  <id>http://bayendor.github.io/</id>
  <author>
    <name><![CDATA[David Bayendor]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Matters of style]]></title>
    <link href="http://bayendor.github.io/blog/2013/07/26/matters-of-style/"/>
    <updated>2013-07-26T11:55:00-06:00</updated>
    <id>http://bayendor.github.io/blog/2013/07/26/matters-of-style</id>
    <content type="html"><![CDATA[<p>As we are starting to write code, it becomes apparent that some code just looks
better than other code.  I&rsquo;m pretty sure the Ruby interpreter doesn&rsquo;t care, but
source code is really a document of the product that the code produces
so it is important that it be readable and understandable to others.</p>

<p>Ruby is pretty expressive, and it seems to offer a lot of flexibility with the
syntax.  This could lead to a lot of variation in style.  Just as there are
 standards for style in the production of written works, so there
are for programmers.</p>

<p>For Ruby that style guide seems to be: <a href="https://github.com/bbatsov/ruby-style-guide">BBatsov&rsquo;s Ruby Style Guide</a>.</p>

<p>It&rsquo;s an envolving document with a lot of examples of good and bad coding style,
some of which I am certain are parts of large philosophical debates.  In any
event as a new Rubyist I feel it is important to develop good habits.  I read
through the whole document and here some picks for new programmers to be aware of when writing code, based on the sort of code we are writing now.</p>

<p><em>All examples courtesy of BBatsov.</em></p>

<p>Limit lines to 80 characters.</p>

<p>Avoid trailing whitespace.</p>

<p>Use spaces around operators, after commas, colons and semicolons, around <code>{</code>and before <code>}</code>. Whitespace might be (mostly) irrelevant to the Ruby interpreter, but its proper use is the key to writing easily readable code.
<code>ruby
sum = 1 + 2
a, b = 1, 2
1 &gt; 2 ? true : false; puts 'Hi'
[1, 2, 3].each { |e| puts e }
</code>
No spaces after <code>(, [</code> or before <code>], )</code>.
<code>ruby
some(arg).other
[1, 2, 3].length
</code>
Use empty lines between defs and to break up a method into logical paragraphs.
```ruby
def some_method
  data = initialize(options)</p>

<p>  data.manipulate!</p>

<p>  data.result
end</p>

<p>def some_method
  result
end
<code>
Use spaces around the = operator when assigning default values to method parameters:
</code>ruby</p>

<h1>bad</h1>

<p>def some_method(arg1=:default, arg2=nil, arg3=[])
  # do something&hellip;
end</p>

<h1>good</h1>

<p>def some_method(arg1 = :default, arg2 = nil, arg3 = [])
  # do something&hellip;
end
<code>
Add underscores to large numeric literals to improve their readability.
</code>ruby</p>

<h1>bad &ndash; how many 0s are there?</h1>

<p>num = 1000000</p>

<h1>good &ndash; much easier to parse for the human brain</h1>

<p>num = 1_000_000
```
Don&rsquo;t use block comments. They cannot be preceded by whitespace and are not as
easy to spot as regular comments.</p>

<p>```ruby</p>

<h1>bad</h1>

<p>== begin
comment line
another comment line
== end</p>

<h1>good</h1>

<h1>comment line</h1>

<h1>another comment line</h1>

<p>```</p>

<p>That&rsquo;s probably enough to get started.  There is also a very useful gem
<a href="https://github.com/bbatsov/rubocop">RuboCop</a> that will tell you
where you are diverging from these recommendations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dates/Times are Hard]]></title>
    <link href="http://bayendor.github.io/blog/2013/07/23/dates-slash-times-are-hard/"/>
    <updated>2013-07-23T12:18:00-06:00</updated>
    <id>http://bayendor.github.io/blog/2013/07/23/dates-slash-times-are-hard</id>
    <content type="html"><![CDATA[<p>Our instructor,Jason Noble, sent out an email this morning about the homework.  In this homework we had progressed beyond the ubiquitous <code>hello_world.rb</code>, and had moved on to calculating how many seconds there were in various blocks of time.  In particular, how many seconds are there between now and 20 or 100 years from now?</p>

<p>Turns out that dates and times are hard to get a handle on in programming.  Especially since a leap year is every 4 years from 1804, but not every 100, and then again every 400 years.  Confusing, I know.  Not just for us, but for own programming tools, and a lot of other folks too.</p>

<p><code><iframe width="640" height="360" src="http://bayendor.github.io//www.youtube.com/embed/xX96xng7sAE" frameborder="0" allowfullscreen></iframe></code></p>

<p>Jason&rsquo;s email addressed the issue that depending on how you do your calculations you end up with different answers:
<code></p>

<p>Jason originally had these values as the specified output:</p>

<pre><code>That means when you turn 20, you've been alive for 628992000 seconds,
and if you make it to 100, you will have lived 3144960000 seconds.
</code></pre>

<p>Classmate Aron was first to finish and his output was slightly different:</p>

<pre><code>That means when you turn 20, you've been alive for 630720000 seconds,
and if you make it to 100, you will have lived 3153600000 seconds.
</code></pre>

<p>Calculation methods were to blame.</p>

<p>Jason:</p>

<pre><code>86400 * 7 * 52 * 20  # seconds/day * 7 days/week * 52 weeks/year * 20 years
86400 * 7 * 52 * 100  # seconds/day * 7 days/week * 52 weeks/year * 20 years
</code></pre>

<p><strong>365 days != 52 weeks * 7 days/week (364 days)</strong></p>

<p>Aron:</p>

<pre><code>86400 * 365 * 20  # seconds / day * 365 days / year * 20 years
86400 * 365 * 100  # seconds / day * 365 days / year * 100 years
</code></pre>

<p><em>(Aron is more accurate, but he forgot to account for leap years)</em></p>

<p>Another possibility from Jason:</p>

<pre><code>86400 * 365.25 * 20  # seconds / day * 365.25 days / year * 20 years  =&gt; 631152000
86400 * 365.25 * 100  # seconds / day * 365.25 days / year * 100 years =&gt; 3155760000
</code></pre>

<p><em>(Looks like Jason is getting closer by trying to account for leap years. A year is actually = 365d, 5h, 48m, 47s.  The fractional diffence is why we have leap year. That is an additional 20,927 seconds per year)</em></p>

<p>Jason used the Rails console to get a slightly better answer:</p>

<pre><code>20.years is 631152000 seconds
100.years is 3155760000 seconds
</code></pre>

<p>Who has the right answer?  Is there another algorithm?</p>

<p></code>
My answer was also slightly different since I actually counted the leap years for 20 and 100 years from now, 5 &amp; 24 respectively.</p>

<p>I then added in the additional days to yield:</p>

<pre><code>20 years from now is 631152000 seconds,
100 years from now is 3155673600 seconds.
</code></pre>

<p>Notice that my 20 year number is the same as the Rails computation, and my 100 year number is much closer.  In fact it&rsquo;s off by exactly one day.  Looks like Rails missed the fact that 100 / 4 = 25 is not an accurate way to count leap years.</p>

<p>I also tried using the <code>Time</code> function in Ruby:</p>

<p>```ruby</p>

<h1>Seconds from now till twenty years from now.</h1>

<p>irb> puts (Time.gm(2033, 7, 23, 11, 03) &ndash; Time.new)</p>

<blockquote><blockquote><p>631130357.633387</p></blockquote></blockquote>

<h1>Seconds from now till 100 years from now.</h1>

<p>irb> puts (Time.gm(2113, 7, 23, 11, 04) &ndash; Time.new)</p>

<blockquote><blockquote><p>3155651903.756982
```
Again, slightly different answers.  There are several gems to tackle this
problem as well.  But this is where I stopped.  Hopefully this stimulates some conversation in class this
 week.</p></blockquote></blockquote>
]]></content>
  </entry>
  
</feed>
