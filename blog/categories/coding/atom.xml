<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coding | Musings of an 8-bit Vet]]></title>
  <link href="http://bayendor.github.io/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://bayendor.github.io/"/>
  <updated>2013-07-27T09:54:14-06:00</updated>
  <id>http://bayendor.github.io/</id>
  <author>
    <name><![CDATA[David Bayendor]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dates/Times are Hard]]></title>
    <link href="http://bayendor.github.io/blog/2013/07/23/dates-slash-times-are-hard/"/>
    <updated>2013-07-23T12:18:00-06:00</updated>
    <id>http://bayendor.github.io/blog/2013/07/23/dates-slash-times-are-hard</id>
    <content type="html"><![CDATA[<p>Our instructor,Jason Noble, sent out an email this morning about the homework.  In this homework we had progressed beyond the ubiquitous <code>hello_world.rb</code>, and had moved on to calculating how many seconds there were in various blocks of time.  In particular, how many seconds are there between now and 20 or 100 years from now?</p>

<p>Turns out that dates and times are hard to get a handle on in programming.  Especially since a leap year is every 4 years from 1804, but not every 100, and then again every 400 years.  Confusing, I know.  Not just for us, but for own programming tools, and a lot of other folks too.</p>

<p><code><iframe width="640" height="360" src="http://bayendor.github.io//www.youtube.com/embed/xX96xng7sAE" frameborder="0" allowfullscreen></iframe></code></p>

<p>Jason&rsquo;s email addressed the issue that depending on how you do your calculations you end up with different answers:
<code></p>

<p>Jason originally had these values as the specified output:</p>

<pre><code>That means when you turn 20, you've been alive for 628992000 seconds,
and if you make it to 100, you will have lived 3144960000 seconds.
</code></pre>

<p>Classmate Aron was first to finish and his output was slightly different:</p>

<pre><code>That means when you turn 20, you've been alive for 630720000 seconds,
and if you make it to 100, you will have lived 3153600000 seconds.
</code></pre>

<p>Calculation methods were to blame.</p>

<p>Jason:</p>

<pre><code>86400 * 7 * 52 * 20  # seconds/day * 7 days/week * 52 weeks/year * 20 years
86400 * 7 * 52 * 100  # seconds/day * 7 days/week * 52 weeks/year * 20 years
</code></pre>

<p><strong>365 days != 52 weeks * 7 days/week (364 days)</strong></p>

<p>Aron:</p>

<pre><code>86400 * 365 * 20  # seconds / day * 365 days / year * 20 years
86400 * 365 * 100  # seconds / day * 365 days / year * 100 years
</code></pre>

<p><em>(Aron is more accurate, but he forgot to account for leap years)</em></p>

<p>Another possibility from Jason:</p>

<pre><code>86400 * 365.25 * 20  # seconds / day * 365.25 days / year * 20 years  =&gt; 631152000
86400 * 365.25 * 100  # seconds / day * 365.25 days / year * 100 years =&gt; 3155760000
</code></pre>

<p><em>(Looks like Jason is getting closer by trying to account for leap years. A year is actually = 365d, 5h, 48m, 47s.  The fractional diffence is why we have leap year. That is an additional 20,927 seconds per year)</em></p>

<p>Jason used the Rails console to get a slightly better answer:</p>

<pre><code>20.years is 631152000 seconds
100.years is 3155760000 seconds
</code></pre>

<p>Who has the right answer?  Is there another algorithm?</p>

<p></code>
My answer was also slightly different since I actually counted the leap years for 20 and 100 years from now, 5 &amp; 24 respectively.</p>

<p>I then added in the additional days to yield:</p>

<pre><code>20 years from now is 631152000 seconds,
100 years from now is 3155673600 seconds.
</code></pre>

<p>Notice that my 20 year number is the same as the Rails computation, and my 100 year number is much closer.  In fact it&rsquo;s off by exactly one day.  Looks like Rails missed the fact that 100 / 4 = 25 is not an accurate way to count leap years.</p>

<p>I also tried using the <code>Time</code> function in Ruby:</p>

<p>```ruby</p>

<h1>Seconds from now till twenty years from now.</h1>

<p>irb> puts (Time.gm(2033, 7, 23, 11, 03) &ndash; Time.new)</p>

<blockquote><blockquote><p>631130357.633387</p></blockquote></blockquote>

<h1>Seconds from now till 100 years from now.</h1>

<p>irb> puts (Time.gm(2113, 7, 23, 11, 04) &ndash; Time.new)</p>

<blockquote><blockquote><p>3155651903.756982
```
Again, slightly different answers.  There are several gems to tackle this
problem as well.  But this is where I stopped.  Hopefully this stimulates some conversation in class this
 week.</p></blockquote></blockquote>
]]></content>
  </entry>
  
</feed>
